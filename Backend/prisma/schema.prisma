generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  RIDER
  RESTAURANT
  ADMIN
}

enum OrderStatus {
  PENDING
  ASSIGNED
  PICKED_UP
  DELIVERED
  CANCELLED
}

model User {
  id        Int      @id @default(autoincrement())
  firstName String
  lastName  String
  email     String   @unique
  password  String
  phone     String?   @unique
  role      Role
  createdAt DateTime @default(now())

  // Relations
  ownedRestaurants Restaurant[]   @relation("UserRestaurants")
  customerOrders   Order[]        @relation("CustomerOrders")
  riderOrders      Order[]        @relation("RiderOrders")
  riderSessions    RiderOnlineSession[]
  ratings          Rating[]
  earnings         Earning[]
  addresses        Address[]
  cartItems        CartItem[]
}

model Restaurant {
  id          Int    @id @default(autoincrement())
  name        String
  phone       String
  address     String
  ownerUserId Int?
  ownerUser   User?  @relation("UserRestaurants", fields: [ownerUserId], references: [id])

  // Customer-facing fields
  image       String?
  description String?
  cuisine     String
  rating      Decimal @db.Decimal(3, 2) @default(0)
  reviewCount Int     @default(0)
  deliveryTime String @default("25-35 min")
  deliveryFee Decimal @db.Decimal(10, 2) @default(0)
  minimumOrder Decimal @db.Decimal(10, 2) @default(0)
  isOpen      Boolean @default(true)
  isFeatured  Boolean @default(false)

  orders    Order[]
  menuItems MenuItem[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([ownerUserId])
  @@index([cuisine])
  @@index([isFeatured])
  @@index([isOpen])
}

model Order {
  id           Int        @id @default(autoincrement())
  code         String     @unique
  customerId   Int
  customer     User       @relation("CustomerOrders", fields: [customerId], references: [id])
  restaurantId Int
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  riderId      Int?
  rider        User?      @relation("RiderOrders", fields: [riderId], references: [id])
  addressId    Int?
  address      Address?   @relation(fields: [addressId], references: [id])

  status      OrderStatus @default(PENDING)
  items       OrderItem[]

  // Customer details
  deliveryInstructions String?

  // Payments
  subTotal    Decimal     @db.Decimal(10, 2)
  deliveryFee Decimal     @db.Decimal(10, 2)
  serviceFee  Decimal     @db.Decimal(10, 2) @default(0)
  tip         Decimal     @db.Decimal(10, 2) @default(0)
  discount    Decimal     @db.Decimal(10, 2) @default(0)
  riderPayout Decimal     @db.Decimal(10, 2)
  totalAmount Decimal     @db.Decimal(10, 2)
  distanceKm  Decimal?    @db.Decimal(6, 2)

  // Timestamps
  assignedAt  DateTime?
  pickedUpAt  DateTime?
  deliveredAt DateTime?
  estimatedDeliveryTime String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ratings  Rating[]
  earnings Earning[]

  @@index([riderId])
  @@index([restaurantId])
  @@index([customerId])
  @@index([addressId])
  @@index([status])
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  order     Order   @relation(fields: [orderId], references: [id])
  menuItemId Int?
  menuItem  MenuItem? @relation(fields: [menuItemId], references: [id])

  name        String
  description String?
  quantity    Int
  unitPrice   Decimal @db.Decimal(10, 2)
  totalPrice  Decimal @db.Decimal(10, 2)
  customizations Json? // For add-ons, special requests

  @@index([orderId])
  @@index([menuItemId])
}

model RiderOnlineSession {
  id        Int       @id @default(autoincrement())
  riderId   Int
  rider     User      @relation(fields: [riderId], references: [id])
  startedAt DateTime  @default(now())
  endedAt   DateTime?

  @@index([riderId, startedAt])
}

model Rating {
  id      Int   @id @default(autoincrement())
  orderId Int   @unique
  order   Order @relation(fields: [orderId], references: [id])
  riderId Int
  rider   User  @relation(fields: [riderId], references: [id])

  score     Int       // <-- renamed from "rating" to "score"
  comment   String?
  createdAt DateTime @default(now())

  @@index([riderId])
}

model Earning {
  id      Int      @id @default(autoincrement())
  riderId Int
  orderId Int
  amount  Decimal  @db.Decimal(10, 2)
  date    DateTime @default(now())

  rider   User  @relation(fields: [riderId], references: [id])
  order   Order @relation(fields: [orderId], references: [id])

  @@index([riderId])
  @@index([orderId])
}

model MenuItem {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  price       Decimal  @db.Decimal(10, 2)
  image       String?
  category    String
  restaurantId Int
  restaurant  Restaurant @relation(fields: [restaurantId], references: [id])

  isAvailable Boolean @default(true)
  isVegetarian Boolean @default(false)
  isVegan     Boolean @default(false)
  spicyLevel  Int     @default(0) // 0-3 scale

  orderItems OrderItem[]
  cartItems  CartItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([restaurantId])
  @@index([category])
  @@index([isAvailable])
}

model Address {
  id       Int    @id @default(autoincrement())
  userId   Int
  user     User   @relation(fields: [userId], references: [id])

  label    String // "Home", "Work", "Other"
  address  String
  city     String?
  postalCode String?
  details  String? // Delivery instructions
  latitude Decimal? @db.Decimal(10, 8)
  longitude Decimal? @db.Decimal(11, 8)
  isDefault Boolean @default(false)

  orders Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([isDefault])
}

model CartItem {
  id        Int     @id @default(autoincrement())
  userId    Int
  user      User    @relation(fields: [userId], references: [id])
  menuItemId Int
  menuItem  MenuItem @relation(fields: [menuItemId], references: [id])

  quantity      Int
  customizations Json? // For add-ons, special requests
  specialInstructions String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, menuItemId])
  @@index([userId])
  @@index([menuItemId])
}
